--------------------------------------------------------------------------------
-- Isolette.aadl (version 10) - System level components of the infant incubator
--   as specified in the FAA's Requirements Engineering Management Handbook.
--
-- Authors: Stephen C. Barrett (scbarrett@ksu.edu) &
--          Brian R. Larson (brl@ksu.edu)
--          Department of Computing & Information Sciences
--
-- Licensed Material - Property of Kansas State University
--------------------------------------------------------------------------------
-- 01: Highlight difference between AADL types & implementations with 2 systems.
--
-- 02: Minimally define thermostat subcomponent of isolette.
--
-- 03: Physical devices minimally defined & added as system subcomponents.
--
-- 04: System interfaces defined, but left untyped.
--
-- 05: System interfaces typed with modeled data entities.
--
-- 06: Intra-system connections made among subcomponents.
--
-- 07: New enumerated & range composite types.
--
-- 08: Abstract air component as control loop's controlled block.
--
-- 09: Software for thermostat regulating & monitoring control functionality.
--
-- 10: Operator interface with temperature settings, display & alarm devices.
--------------------------------------------------------------------------------
package KSU_Isolette
public
with Base_Types, Iso_Types;  -- Basic & isolette specific data types
with Devices;  -- System's physical entities (i.e., black boxes)
with Regulate, Monitor;  -- Processes for thermostat functionality


--------------------------------------------------------------------------------
-- Top-level type is the boundary between the isolette unit & its environment.
--------------------------------------------------------------------------------
system isolette
  features
    heat_loss: out data port Iso_Types::heat;
end isolette;

-- An implementation of the isolette type having a single-sensor thermostat.
system implementation isolette.single_sensor
  subcomponents
    thermostat: system thermostat_single_sensor.impl;
    heat_source: device Devices::heat_source.impl;
    temp_sensor: device Devices::temperature_sensor.impl;
    heated_air: abstract air_to_heat.impl;
    fail_alarm: device Devices::failure_alarm.impl;
    op_interface: system operator_interface.impl;

  connections
    t1: port temp_sensor.air_temp -> thermostat.air_temp;
    t2: port thermostat.on_heater -> heat_source.on_heater;
    t3: port thermostat.on_alarm -> fail_alarm.on_alarm;
    
    h1: port heated_air.heat_sense -> temp_sensor.air_heat; 
    h2: port heat_source.heater_output -> heated_air.heat_source;
    h3: port heated_air.heat_sink -> heat_loss;

    o1: port op_interface.lower_desired_temp -> thermostat.lower_desired_temp;
    o2: port op_interface.upper_desired_temp -> thermostat.upper_desired_temp;
    o3: port op_interface.lower_alarm_temp -> thermostat.lower_alarm_temp;
    o4: port op_interface.upper_alarm_temp -> thermostat.upper_alarm_temp;

    o5: port thermostat.display_temp -> op_interface.display_temp;
    o6: port thermostat.reg_status -> op_interface.reg_status;
    o7: port thermostat.mon_status -> op_interface.mon_status;
end isolette.single_sensor;

-- An implementation of the isolette type having a dual-sensor thermostat.
system implementation isolette.dual_sensor
end isolette.dual_sensor;


--------------------------------------------------------------------------------
-- Thermostat component type that relies on a single temperature sensor.
--------------------------------------------------------------------------------
system thermostat_single_sensor
  features
    air_temp: in data port Iso_Types::sensed_temperature;
    lower_desired_temp: in data port Iso_Types::lower_desired_temperature;
    upper_desired_temp: in data port Iso_Types::upper_desired_temperature;
    lower_alarm_temp: in data port Iso_Types::lower_alarm_temperature;
    upper_alarm_temp: in data port Iso_Types::upper_alarm_temperature;
    
    on_heater: out event data port Iso_Types::on_off;
    on_alarm: out event data port Iso_Types::on_off;
    display_temp: out data port Iso_Types::sensed_temperature;
    reg_status: out data port Iso_Types::op_status;
    mon_status: out data port Iso_Types::op_status;
end thermostat_single_sensor;

-- An implementation of the single sensor thermostat type.
system implementation thermostat_single_sensor.impl
  subcomponents
    regulate_temp: process Regulate::regulate_temperature.impl;
    monitor_temp: process Monitor::monitor_temperature.impl;

  connections
    r1: port air_temp -> regulate_temp.current_temp;
    r2: port regulate_temp.on_heater -> on_heater;
    
    m1: port air_temp -> monitor_temp.current_temp;
    m2: port monitor_temp.on_alarm -> on_alarm;
    
    d1: port lower_desired_temp -> regulate_temp.lower_desired_temp;
    d2: port upper_desired_temp -> regulate_temp.upper_desired_temp;
    a1: port lower_alarm_temp -> monitor_temp.lower_alarm_temp;
    a2: port upper_alarm_temp -> monitor_temp.upper_alarm_temp;
    
    c1: port regulate_temp.op_status -> reg_status;
    c2: port monitor_temp.op_status -> mon_status;
    c3: port regulate_temp.op_temp -> display_temp;
end thermostat_single_sensor.impl;


--------------------------------------------------------------------------------
-- Air component type is the controlled entity in the system control loop.
--------------------------------------------------------------------------------
abstract air_to_heat
  features
    heat_source: in data port Iso_Types::heat;  -- Negative in would be a loss.
    heat_sink: out data port Iso_Types::heat;  -- Negative out would be a gain.
    heat_sense: out data port Iso_Types::heat;
end air_to_heat;

-- An implementation of the abstract air type.
abstract implementation air_to_heat.impl
  -- Model continuous behavior air heating & cooling with hybrid annex.

  connections
    h1: port heat_source -> heat_sink;  -- Make connections through HA.
end air_to_heat.impl;


--------------------------------------------------------------------------------
-- Control panel through which operator interfaces with the isolette system.
--------------------------------------------------------------------------------
system operator_interface
  features
    display_temp: in data port Iso_Types::sensed_temperature;
    reg_status: in data port Iso_Types::op_status;
    mon_status: in data port Iso_Types::op_status;
    
    lower_desired_temp: out data port Iso_Types::lower_desired_temperature;
    upper_desired_temp: out data port Iso_Types::upper_desired_temperature;
    lower_alarm_temp: out data port Iso_Types::lower_alarm_temperature;
    upper_alarm_temp: out data port Iso_Types::upper_alarm_temperature;
end operator_interface;

system implementation operator_interface.impl
  subcomponents
    temp_display: device Devices::temperature_display.impl;
    status_display: device Devices::status_display.impl;
    desired_set: device Devices::desired_setter;
    alarm_set: device Devices::alarm_setter;
    
  connections
    t1: port display_temp -> temp_display.air_temp;
    s1: port reg_status -> status_display.reg_status;
    s2: port mon_status -> status_display.mon_status;
    d1: port desired_set.lower_desired_temp -> lower_desired_temp;
    d2: port desired_set.upper_desired_temp -> upper_desired_temp;
    a1: port alarm_set.lower_alarm_temp -> lower_alarm_temp;
    a2: port alarm_set.upper_alarm_temp -> upper_alarm_temp;
end operator_interface.impl;


end KSU_Isolette;
