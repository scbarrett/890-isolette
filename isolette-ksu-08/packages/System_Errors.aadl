package System_Errors
public


annex EMv2
{**   
  error types
    HeatControlError: type;  -- Heater on or off inappropriately
    
    AlarmError: type;  -- Various alarm errors
    FalseAlarm: type extends AlarmError;  -- Alarm erroneously sounded
    MissedAlarm: type extends AlarmError;  -- Alarm missed (Not sounded?)  
 
    StatusError: type;  -- Mode or status errors
    RegulatorStatusError: type extends StatusError;  -- Regulator status wrong
    RegulatorModeError: type extends StatusError;  -- Regulator mode wrong
    MonitorStatusError: type extends StatusError;  -- Monitor status wrong
    MonitorModeError: type extends StatusError;  -- Monitor mode wrong
 
    InternalError: type;  -- An internal error was detected
    DetectedFault: type;  -- Fault was detected (and announced)
    UndetectedFault: type;  -- Fault occurred, but not detected
    OperatorError: type;  -- Operator desired/alarm temperature entry mistake
 
    ThreadFault renames type ErrorLibrary::EarlyServiceTermination;  -- Halt
  end types;


  -- Machine for components that source an out of range error and fail 
  --   completely ("failed"). 
  error behavior FailStop
    use types ErrorLibrary;
    
    events 
      fail: error event {OutOfRange};
--      fail: error event when "OutOfRange";  --[scb] Is "error_event_condition" same as {error_type}?
    
    states
      working: initial state;  -- Initial/default state of component.
      failed: state;  -- State of component after an item value error.

    transitions
      -- Moving from a working to a failed state due to a fail error.
      working -[ fail ]-> failed;
end behavior;
	
	
  -- Machine for components that source an out of range error and fail 
  --   completely ("failed"), or that source an undetectable error and fail 
  --   intermittently ("flakey").
  error behavior FailSubtle
    use types ErrorLibrary;
    
    events 
      hardfail: error event {OutOfRange};
      subtlefail: error event {UndetectableValueError, ItemOmission};

    states 
      working: initial state;  -- Initial/default state of component.
      failed: state;  -- State of component after out of range value error.
      flakey: state;  -- State of component after undetectable value error.

    transitions
      -- Moving from a working to a failed, or flakey state due to either a 
      --   hard, or subtle item value error, respectively.
      working -[ hardfail ]-> failed;
      working -[ subtlefail ]-> flakey;
  end behavior;


  -- Machine to propogate, and possibly, transform errors on connections 
  --   routed through a composite component.
  error behavior CompositeFailure
    use types System_Errors;
    
    states
      Operational: initial state;
      ReportedFailure: state {DetectedFault};
      MissedFailure: state {MissedAlarm};
      FalseAlarm: state {FalseAlarm};  --[scb] What does typing a state do?
  end behavior;
**};

end System_Errors;
